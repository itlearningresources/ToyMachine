PRAGMA MEMORY 0000 BOOT
0700 0000
PRAGMA PAGESIZE 0010 XXX
PRAGMA MEMORY 0500 DATA
PRAGMA STRING Michael
PRAGMA MEMORY 0700 PROGRAM
1010 0505
0410 0000 TOL
7021 0000
2110 ELOOP
2000 TOL
PRAGMA HERE ELOOP
NOP  0000
NOP  0000
NOP  0000
1020 0040
0420 0000 TOLA
2120 ELOOPA
2000 TOLA
1020 0099 ELOOPA
NOP  0000
NOP  0000
NOP  0000
0000 0000 
0310 0000 
PRAGMA MEMORY 0800 END
HALT 0000
0310 0000 
0310 0000 
0310 0000 
HALT 0000
PRAGMA MEMORY 0200 DATA
0041 0041
0041 0041
0041 0041
0000 0000
HALT 0000
ADD 33 1122 
ADD33  8899
HALT 0000
HALT 0000
2000 0202
ADD66  8899
SUB22  5555 
HLT 0000
JMP 0101
JMP 2200
ADD44 4444


//7010 0200
//SYS 21 0000
//
//   Halt
//   0x00 halt                              haltflag = true                         
//
//   Math and Accumulator
//   0x01 add                               reg[d] = reg[s] + reg[t]                
//   0x02 subtract                          reg[d] = reg[s] - reg[t]                
//   0x03 increment register                reg[d]++                                
//   0x04 decrement register                reg[d]--                                
//   0x05 accumulate                        reg[d] = reg[d] + reg[s]                
//   0x06 deccumulate                       reg[d] = reg[d] + reg[s]                
//
//   Load and Store
//   0x10 load register with addr           reg[d] = word                           
//   0x11 load register with memory         reg[d] = mem[word]                      
//   0x14 store reg to mem                  mem[addr] = reg[d]                      
//   0x15 store reg to mem indirect         mem[reg[d] & 0x0FFFF] = reg[s]          
//   0x16 load indirect                     reg[d] = mem[reg[s] & 0xFFFF]           
//   0x17 load the index register           indexregister = word                    
//
//   Branch and Jump
//   0x20 jump                              pc = addr                               
//   0x21 branch if zero                    if (reg[d] == 0) pc = addr              
//   0x22 branch if not zero                if (reg[d] != 0) pc = addr              
//   0x23 pop and link if zero              if (reg[d] == 0) pc = popstk            
//   0x24 pop and link if not zero          if (reg[d] != 0) pc = popstk            
//   0x25 branch if pos                     if (reg[d] >  0) pc = addr              
//   0x26 jump indirect                     pc = reg[d]                             
//   0x27 jump and link                     reg[d] = pc; pc = addr                  
//
//   Stack
//   0x30 push address                      push addr                               
//   0x31 push register                     push reg[d]                             
//   0x32 pop to register                   pop to reg[d]                           
//   0x33 pop and link                      return                                  
//   0x34 Push This                         push this addr                          
//   0x35 push pc and link                  push pc and pc = addr                   
//
//   Bitwise and Shift
//   0x40 bitwise and                       reg[d] = reg[s] & reg[t]                
//   0x41 bitwise or                        reg[d] = reg[s] ^ reg[t]                
//   0x42 shift left                        reg[d] = reg[s] << reg[t]               
//   0x43 shift right                       reg[d] = reg[s] >> reg[t]               
//   0x44 shift reg left                    reg[d] = reg[d] << 1                    
//   0x45 shift reg right                   reg[d] = reg[d] >> 1                    
//
//   NOP
//   0x50 NOP                               NOP                                     
//
//   I/O and String
//   0x61 reg char out                      reg[d] char out                         
//   0x62 mem char out                      mem[addr] char out                      
//   0x63 string 10 16b                     string out 16b                          
//   0x64 string out 8b                     string out 8b                           
//   0x65 int to ascii                      int to ascii                            
//   0x66 mem int to ascii                  mem int to ascii                        

// comment
# 0C0C 0044   if (RC == 0) pc goto 44      while (a != 0) {
# 010A 0A0B   RA <- RA - RB                   a = a - b;
# 020C 0C0B   RC <- RC + RB                   c = c + b;
# 0022 0000
# 1800 0018   pc <- 0018                     }
# 090C 000C   mem[0C] <- RC
# 2000 0000   NOP
# 1900 0000   pop and link
